import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();
        String[] unsorted = new String[n];
        
       // BigInteger bg = new BigInteger();
        for(int unsorted_i=0; unsorted_i < n; unsorted_i++){
            unsorted[unsorted_i] = in.next();
        }
        Solution s = new Solution();
        s.sort(unsorted, 0, n-1);
        
        for(int i=0;i<n;i++)
            {
            System.out.println(unsorted[i]);
        }
        
    }
    
    public void sort(String unsorted[], int low, int high)
        {
        if(low < high)
            {
            int pi = partition(unsorted, low, high);
            
            sort(unsorted, low, pi-1);
            sort(unsorted, pi+1, high);
        }
    }
    
    public int partition(String unsorted[], int low, int high)
        {
        BigInteger pivot = new BigInteger(unsorted[high]);
       // int pivot = unsorted[high];
        
        int i = (low-1); // index of smaller element
        for (int j=low; j<=high-1; j++)
        {
            // If current element is smaller than or
            // equal to pivot
            
            BigInteger x = new BigInteger(unsorted[j]);
            if (x.compareTo(pivot) == -1)
            {
                i++;
 
                // swap arr[i] and arr[j]
                String temp = unsorted[i];
                unsorted[i] = unsorted[j];
                unsorted[j] = temp;
            }
        }
 
        // swap arr[i+1] and arr[high] (or pivot)
        String temp = unsorted[i+1];
        unsorted[i+1] = unsorted[high];
        unsorted[high] = temp;
 
        return i+1;
    }
}
